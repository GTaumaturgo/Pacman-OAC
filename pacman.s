.eqv 

.data	
	testebin:   .byte
	0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x2E, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x2E, 0x57, 0x57, 0x46, 0x57, 0x42, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x46, 0x46, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x42, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x42, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x42, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x46, 0x46, 0x46, 0x46, 0x42, 0x57, 0x57, 0x42, 0x46, 0x46, 0x46, 0x46, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x57, 0x46, 0x46, 0x57, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x42, 0x57, 0x46, 0x57, 0x46, 0x57, 0x42, 0x57, 0x46, 0x57, 0x46, 0x57, 0x2E, 0x46, 0x46, 0x46, 0x46, 0x2E, 0x57, 0x46, 0x57, 0x46, 0x57, 0x42, 0x57, 0x46, 0x57, 0x46, 0x57, 0x42, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x57, 0x46, 0x46, 0x46, 0x57, 0x46, 0x42, 0x46, 0x46, 0x42, 0x46, 0x57, 0x46, 0x46, 0x46, 0x57, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x57, 0x46, 0x46, 0x46, 0x57, 0x46, 0x42, 0x46, 0x46, 0x42, 0x46, 0x57, 0x46, 0x46, 0x46, 0x57, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x42, 0x57, 0x46, 0x57, 0x46, 0x57, 0x42, 0x57, 0x46, 0x57, 0x46, 0x57, 0x2E, 0x46, 0x46, 0x46, 0x46, 0x2E, 0x57, 0x46, 0x57, 0x46, 0x57, 0x42, 0x57, 0x46, 0x57, 0x46, 0x57, 0x42, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x57, 0x46, 0x46, 0x57, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x42, 0x57, 0x57, 0x42, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x42, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x42, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x42, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x46, 0x46, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x42, 0x57, 0x46, 0x57, 0x57, 0x2E, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x2E, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57
	simplesbin: .byte 
	0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 
	0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x2E, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x2E, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x2E, 0x46, 
	0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x2E, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 
	0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 
	0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 
	0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 
	0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 
	0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x42, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 
	0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 
	0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 
	0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 
	0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x2E, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x2E, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x2E, 0x46, 
	0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x2E, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 
	0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57
	
	# arquivos com as texturas.
	# parede
	tex0:  .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF			
	# comida
	tex1:  .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	# comida grande
	tex2:  .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	# pacman
	tex3: .byte 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00
	# azul
	tex4: .byte 0x00, 0x00, 0xA8, 0xF8, 0xF8, 0xA8, 0x00, 0x00, 0x00, 0xA8, 0xF8, 0xF8, 0xF8, 0xF8, 0xA8, 0x00, 0x08, 0xF9, 0xFC, 0xF8, 0xF8, 0xFC, 0xF9, 0x08, 0x08, 0xA8, 0xAD, 0xF9, 0xF4, 0xA7, 0xD9, 0x01, 0x08, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x08, 0x08, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x08, 0x08, 0xF0, 0xF0, 0xF8, 0xF8, 0xF0, 0xF0, 0x08, 0x00, 0x00, 0x36, 0x36, 0x00, 0x00, 0x01, 0x06
	# rosa
	tex5: .byte 0x00, 0x00, 0x85, 0xC7, 0xC7, 0x85, 0x00, 0x00, 0x00, 0x85, 0xC7, 0xC7, 0xC7, 0xC7, 0x85, 0x00, 0x01, 0xCF, 0xE7, 0xC7, 0xC7, 0xE7, 0xCF, 0x01, 0x01, 0x85, 0xAD, 0xCF, 0xF4, 0xA7, 0x79, 0x09, 0x01, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0x01, 0x01, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0x01, 0x01, 0xC6, 0xC6, 0xC7, 0xC7, 0xC6, 0xC6, 0x01, 0x00, 0x00, 0x30, 0xF0, 0xC0, 0x00, 0x01, 0x0E
	# laranja
	tex6: .byte 0xC7, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0xC7, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xC7, 0xC7, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xC7, 0x20, 0x20, 0x27, 0x20, 0x20, 0x20, 0x20, 0xC7, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xC7, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xC7, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xC7, 0xC7, 0x20, 0x20, 0x20, 0x20, 0xC7, 0xC7
	# vermelho
	tex7: .byte 0x00, 0x00, 0x05, 0x07, 0x07, 0x05, 0x00, 0x00, 0x00, 0x05, 0x07, 0x07, 0x07, 0x07, 0x05, 0x00, 0x01, 0x0F, 0xA7, 0x07, 0x07, 0xA7, 0x0F, 0x01, 0x01, 0x05, 0xAD, 0x0F, 0xE4, 0x9B, 0xC0, 0x00, 0x01, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x01, 0x01, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x01, 0x01, 0x06, 0x06, 0x07, 0x07, 0x06, 0x06, 0x01, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00
	# preto
	tex8: .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	fila: .space 1800 # fila guarda ate 700 vertices, deveria ser suficiente.
	vetor_pai: .space 2400 # cada vertice vai ter 1 pai
	##### ate aqui esta alinhado
	charponto: .byte 46  
	char0: .byte 48
	char1: .byte 49
	char2: .byte 50
	char3: .byte 51
	char4: .byte 52
	charA: .byte 65
	charB: .byte 66
	charD: .byte 68
	charE: .byte 69
	charF: .byte 70
	charL: .byte 76
	charP: .byte 80
	charQ: .byte 81
	charR: .byte 82
	charS: .byte 83
	charV: .byte 86
	charW: .byte 87
	pacman1X:  .byte 1
	pacman1Y:  .byte 1
	pacman1vivo: .byte 1
	pacman1dir: .byte 0
	pacman1_pos_antigaX: .byte 1
	pacman1_pos_antigaY: .byte 1
	pacman1_op_time: .byte 0
	pacman2X:  .byte 38
	pacman2Y:  .byte 1
	pacman2vivo: .byte 1
	pacman2dir: .byte 0
	pacman2_pos_antigaX: .byte 1
	pacman2_pos_antigaY: .byte 1
	pacman2_op_time: .byte 0
	pacman3X:  .byte 1
	pacman3Y:  .byte 28
	pacman3vivo: .byte 1
	pacman3dir: .byte 0
	pacman3_pos_antigaX: .byte 1
	pacman3_pos_antigaY: .byte 1
	pacman3_op_time: .byte 0
	pacman4X:  .byte 38
	pacman4Y:  .byte 28
	pacman4vivo: .byte 1
	pacman4dir: .byte 0
	pacman4_pos_antigaX: .byte 1
	pacman4_pos_antigaY: .byte 1
	pacman4_op_time: .byte 0
	n_jog: .byte 4
	n_fant:.byte 4
	azulX: .byte 17
	azulY: .byte 13
	azulvivo:  .byte 1
	azul_pos_antigaX:
	azul_pos_antigaY:
	rosaX: .byte 22
	rosaY: .byte 13
	rosa_pos_antigaX:
	rosa_pos_antigaY:
	rosavivo: .byte 1
	laranjaX: .byte 17
	laranjaY: .byte 16
	laranjavivo: .byte 1
	laranja_pos_antigaX:
	laranja_pos_antigaY:
	vermelhoX: .byte 22
	vermelhoY: .byte 16
	vermelhovivo: .byte 1
	vermelho_pos_antigaX:
	vermelho_pos_antigaY:
	bitmap: .word 0xff000000
	teclado:.word 0xff100004
	estou_aq: .asciiz "Estou aqui\n" # mensagem para debug
	erro_text:.asciiz "ERRO: algum caractere nao pode ser reconhecido ao aplicar as texturas"
	
.text
	jal menu
	li $v0, 10
	syscall

# bfs retorna em $v0 e $v1 a proxima posicao do fantasma
# recebe
# posicao do fantasmaX em $a0
# posicao do fantasmaY em $a1
bfs:
	addi $sp, $sp, -24
	sw   $ra, 0($sp)
	sw   $s0, 4($sp)
	sw   $s1, 8($sp)
	sw   $s2, 12($sp)
	sw   $s3, 16($sp)
	sw   $s4, 20($sp)
	
	
	jal inicializa_vetor_pai
	move $s0, $a0 # s0 = x inicial
	move $s1, $a1 # s1 = y inicial
	# PAI DE ORIGEM = -1
	# FALTA ISSO
	la $s2, fila # s2 = fim_fila
	la $s3, fila # s3 = inicio_fila

	sb $a0, 0($s2)
	sb $a1, 1($s2) # enfilera posicao inicial
	addi $s2, $s2, 2 # atualiza fim
		   
loop_bfs:
	beq $s2, $s3, fim_bfs # quando o fim da fila apontar pro mesmo lugar que o começo, a fila estará vazia
	
	lb $t0, 0($s3)
	lb $t1, 1($s3) # desenfilera, t0 = x t1 = y
	addi $s3, $s3, 2 # atualiza inicio
	
	lb $t2, pacman1X
	lb $t3, pacman1Y	
	bne $t2, $t0, pula_loop_bfs01
	bne $t3, $t1, pula_loop_bfs01 # se a posicao desenfileirada for a mesma do pacman1
	j  loop_acha_pai
pula_loop_bfs01:
	lb $t2, pacman2X
	lb $t3, pacman2Y	
	bne $t2, $t0, pula_loop_bfs02
	bne $t3, $t1, pula_loop_bfs02 # se a posicao desenfileirada for a mesma do pacman1
	j loop_acha_pai
pula_loop_bfs02:
	lb $t2, pacman3X
	lb $t3, pacman3Y	
	bne $t2, $t0, pula_loop_bfs03
	bne $t3, $t1, pula_loop_bfs03 # se a posicao desenfileirada for a mesma do pacman1
	j loop_acha_pai
pula_loop_bfs03:
	lb $t2, pacman4X
	lb $t3, pacman4Y	
	bne $t2, $t0, pula_loop_bfs04
	bne $t3, $t1, pula_loop_bfs04 # se a posicao desenfileirada for a mesma do pacman1
	j loop_acha_pai
pula_loop_bfs04:

	li $t2, 40
	mult $t2, $t1
	mflo $t2  #t2 =  y * 40
	
	add $t2, $t2, $t0
	la $t8, testebin
	add $t2, $t2, $t8 # t2 = ponteiro para o char atual
	
	
	addi $t3, $t2, -40 # t3 = ponteiro para char em cima do atual		
	lb $t4, 0($t3)     # t4 = char acima do atual
	lb $t5, charW
	beq $t4, $t5, pula_loop_bfs1 # se for parede, nao vai enfileirar.
		
	addi $t2, $t1, -1
	li $t6, 40
	mult $t6, $t2
	mflo $t6
	add  $t6, $t6, $t0 # t6 = 40y+ x
	sll  $t6, $t6, 1 # multiplica por 2 pq gasta 2 bytes cada pai
	la   $t8, vetor_pai
	add  $t6, $t6, $t8
	lb   $t5, 0($t6)
	addi $t7, $0, -1
	bne  $t5, $t7, pula_loop_bfs1 # se tiver pai, ou seja, se ja foi visitado, pula
	
	sb   $t0, 0($t6) # atualiza vetor_pai
	sb   $t1, 1($t6)
	  
	sb   $t0, 0($s2)
	sb   $t2, 1($s2)
	addi $s2, $s2, 2 # enfilera
		
pula_loop_bfs1:
	li $t2, 40
	mult $t2, $t1
	mflo $t2  #t2 =  y * 40
	
	add $t2, $t2, $t0
	la $t8, testebin
	add $t2, $t2, $t8 # t2 = ponteiro para o char atual
		
	addi $t3, $t2, 40 # t3 = ponteiro para char em cima do atual		
	lb $t4, 0($t3)     # t4 = char acima do atual
	lb $t5, charW
	beq $t4, $t5, pula_loop_bfs2 # se for parede, nao vai enfileirar.
	
	addi $t2, $t1, 1
	li $t6, 40
	mult $t6, $t2
	mflo $t6
	add  $t6, $t6, $t0 # t6 = 40y+ x
	sll  $t6, $t6, 1 # multiplica por 2 pq gasta 2 bytes cada pai
	la   $t8, vetor_pai
	add  $t6, $t6, $t8
	lb   $t5, 0($t6)
	addi $t7, $0, -1
	bne  $t5, $t7, pula_loop_bfs2 # se tiver pai, ou seja, se ja foi visitado, pula
	
	sb   $t0, 0($t6) # atualiza vetor_pai
	sb   $t1, 1($t6)
	
	
	sb   $t0, 0($s2)
	sb   $t2, 1($s2)
	addi $s2, $s2, 2 # enfilera
pula_loop_bfs2:
	li $t2, 40
	mult $t2, $t1
	mflo $t2  #t2 =  y * 40
	
	add $t2, $t2, $t0
	la $t8, testebin
	add $t2, $t2, $t8 # t2 = ponteiro para o char atual
		
	addi $t3, $t2, -1 # t3 = ponteiro para char a esquerda do atual		
	lb $t4, 0($t3)     # t4 = char a esquerda do atual
	lb $t5, charW
	beq $t4, $t5, pula_loop_bfs3 # se for parede, nao vai enfileirar.
	
	addi $t2, $t0, -1
	li $t6, 40
	mult $t6, $t1
	mflo $t6
	add  $t6, $t6, $t2 # t6 = 40y+ x
	sll  $t6, $t6, 1 # multiplica por 2 pq gasta 2 bytes cada pai
	la   $t8, vetor_pai
	add  $t6, $t6, $t8
	lb   $t5, 0($t6)
	addi $t7, $0, -1
	bne  $t5, $t7, pula_loop_bfs3 # se tiver pai, ou seja, se ja foi visitado, pula
	
	sb   $t0, 0($t6) # atualiza vetor_pai
	sb   $t1, 1($t6)
	
	sb   $t2, 0($s2)
	sb   $t1, 1($s2)
	addi $s2, $s2, 2 # enfilera
pula_loop_bfs3:
	li $t2, 40
	mult $t2, $t1
	mflo $t2  #t2 =  y * 40
	
	add $t2, $t2, $t0
	la $t8, testebin
	add $t2, $t2, $t8 # t2 = ponteiro para o char atual
		
	addi $t3, $t2, 1 # t3 = ponteiro para char a direita do atual		
	lb $t4, 0($t3)     # t4 = char a direita do atual
	lb $t5, charW
	beq $t4, $t5, pula_loop_bfs4 # se for parede, nao vai enfileirar
	addi $t2, $t0, 1
	li $t6, 40
	mult $t6, $t1
	mflo $t6
	add  $t6, $t6, $t2 # t6 = 40y+ x
	sll  $t6, $t6, 1 # multiplica por 2 pq gasta 2 bytes cada pai
	la   $t8, vetor_pai
	add  $t6, $t6, $t8
	lb   $t5, 0($t6)
	addi $t7, $0, -1
	bne  $t5, $t7, pula_loop_bfs4 # se tiver pai, ou seja, se ja foi visitado, pula
	
	sb   $t0, 0($t6) # atualiza vetor_pai
	sb   $t1, 1($t6)
	
	sb   $t2, 0($s2)
	sb   $t1, 1($s2)
	addi $s2, $s2, 2 # enfilera
pula_loop_bfs4:
	j loop_bfs

loop_acha_pai:
	
	li $t2, 40
	mult $t1, $t2
	mflo $t2
	add $t2, $t2, $t0
	sll $t2, $t2, 1
	
	la $t8, vetor_pai
	add $t2, $t2, $t8
		
	lb $t0, 0($t2)
	lb $t1, 1($t2)
	
	bne $t0, $s0, pula_loop_acha_pai
	bne $t1, $s1, pula_loop_acha_pai
	
	j  fim_bfs
pula_loop_acha_pai:
	move $v0, $t0
	move $v1, $t1	
	j loop_acha_pai
fim_bfs:
	lw   $ra, 0($sp)
	lw   $s0, 4($sp)
	lw   $s1, 8($sp)
	lw   $s2, 12($sp)
	lw   $s3, 16($sp)
	lw   $s4, 20($sp)
	add $sp, $sp, 24
	jr $ra
# essa rotina inicializa os elementos do vetor_pai com -1
inicializa_vetor_pai:
	la $t0, vetor_pai
	addi $t1, $t0, 2400
	la $t2, 0xFFFFFFFF
loop_inicializa_vetor_pai:
	beq $t0, $t1, return
	sw  $t2, 0($t0)
	addi $t0, $t0, 4
	j loop_inicializa_vetor_pai


# POSSIVEL REFATORAR
# faça se preciso
desenha_agentes:
	addi $sp, $sp,-4
	sw   $ra, 0($sp)
	# verifica se o agente i está vivo, caso esteja, o desenha.
	lb $t0, pacman1vivo
	bne $t0, 1, pula_desenha_agentes1
	la $a0, tex3
	lb $a1, pacman1X
	lb $a2, pacman1Y
	li $t8, 40   # torna vazio aonde eles passaram
	mult $t8, $a2
	mflo $t8
	add $t8, $t8, $a1
	la $t7, testebin
	add $t8, $t8, $t7
	lb $t7, charponto
	sb $t7, 0($t8) 
	jal desenha_text
pula_desenha_agentes1:
	lb $t0, pacman2vivo
	bne $t0, 1, pula_desenha_agentes2
	la $a0, tex3
	lb $a1, pacman2X
	lb $a2, pacman2Y
	li $t8, 40   # torna vazio aonde eles passaram
	mult $t8, $a2
	mflo $t8
	add $t8, $t8, $a1
	la $t7, testebin
	add $t8, $t8, $t7
	lb $t7, charponto
	sb $t7, 0($t8)
	jal desenha_text
pula_desenha_agentes2:
	lb $t0, pacman3vivo
	bne $t0, 1, pula_desenha_agentes3
	la $a0, tex3
	lb $a1, pacman3X
	lb $a2, pacman3Y
	li $t8, 40   # torna vazio aonde eles passaram
	mult $t8, $a2
	mflo $t8
	add $t8, $t8, $a1
	la $t7, testebin
	add $t8, $t8, $t7
	lb $t7, charponto
	sb $t7, 0($t8)
	jal desenha_text
pula_desenha_agentes3:
	lb $t0, pacman4vivo
	bne $t0, 1, pula_desenha_agentes4
	la $a0, tex3
	lb $a1, pacman4X
	lb $a2, pacman4Y
	li $t8, 40   # torna vazio aonde eles passaram
	mult $t8, $a2
	mflo $t8
	add $t8, $t8, $a1
	la $t7, testebin
	add $t8, $t8, $t7
	lb $t7, charponto
	sb $t7, 0($t8)
	jal desenha_text
pula_desenha_agentes4:
	lb $t0, azulvivo
	bne $t0, 1, pula_desenha_agentes5
	la $a0, tex4
	lb $a1, azulX
	lb $a2, azulY
	jal desenha_text
pula_desenha_agentes5:
	lb $t0, rosavivo
	bne $t0, 1, pula_desenha_agentes6
	la $a0, tex5
	lb $a1, rosaX
	lb $a2, rosaY
	jal desenha_text
pula_desenha_agentes6:
	lb $t0, laranjavivo
	bne $t0, 1, pula_desenha_agentes7
	la $a0, tex6
	lb $a1, laranjaX
	lb $a2, laranjaY
	jal desenha_text
pula_desenha_agentes7:
	lb $t0, vermelhovivo
	bne $t0, 1, pula_desenha_agentes8
	la $a0, tex7
	lb $a1, vermelhoX
	lb $a2, vermelhoY
	jal desenha_text
	
pula_desenha_agentes8:	
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra
				
# preenche tela recebe
# cor (32 bits) em $a0
preenche_tela:
	lw $t0, bitmap
	or $t1, $t0, $zero
	addi $t1, $t1, 76800
loop_preenche_tela:
	beq $t0, $t1, return
	sw $a0, 0($t0)
	addi $t0, $t0, 4
	j loop_preenche_tela
menu:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	li $a0, 0x00000000 # cor = preto
	jal preenche_tela  # preenche preto
loop_menu:	
	li $v0, 12
	syscall
	
	lb $t0, char1
	beq $v0, $t0, menu_escolhe_jogadores

	lb $t0, char2
	beq $v0, $t0, menu_escolhe_fantasmas
	
	lb $t0, char3
	beq $v0, $t0, jogar
	#lb $t0, char3
	#beq $v0, $t0, menu_escolhe mapa
	lb $t0, char4
	beq $v0, $t0, sair_do_jogo
	j loop_menu
	
menu_escolhe_jogadores:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	li $a0, 0x00000000
	jal preenche_tela
loop_menu_escolhe_jogadores:
	li $v0, 12
	syscall  # le char
	lb $t0, char0 # to = '0'
	sub $t0, $v0, $t0 # t0 = v0 - '0', ou seja, o proprio numero de jogadores
	li $t1, 5 # t1 = 5
	slt $t1, $t0, $t1 # t0 < 5 ? 
	beq $t1, $zero, loop_menu_escolhe_jogadores # se nao for, le de novo porque o máximo é 4
	
	li $t1, 0 # t1 = 1
	sgt $t1, $t0, $t1 # t0 > 0 ?
	beq $t1, $zero, loop_menu_escolhe_jogadores # se nao for, le de novo porque o mínimo é 1
	# Caso não haja problema, armazene o número em n_jog
	sb $t0, n_jog
fim_loop_menu_escolhe_jogadores:
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jal menu


menu_escolhe_fantasmas:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	li $a0, 0x00000000
	jal preenche_tela
loop_menu_escolhe_fantasmas:
	li $v0, 12
	syscall  # le char
	lb $t0, char0 # to = '0'
	sub $t0, $v0, $t0 # t0 = v0 - '0', ou seja, o proprio numero de jogadores
	li $t1, 5 # t1 = 5
	slt $t1, $t0, $t1 # t0 < 5 ? 
	beq $t1, $zero, loop_menu_escolhe_fantasmas # se nao for, le de novo porque o máximo é 4
	
	li $t1, 0 # t1 = 1
	sgt $t1, $t0, $t1 # t0 > 0 ?
	beq $t1, $zero, loop_menu_escolhe_fantasmas # se nao for, le de novo porque o mínimo é 1
	# Caso não haja problema, armazene o número em n_jog
	sb $t0, n_fant
fim_loop_menu_escolhe_fantasmas:
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jal menu
	
sair_do_jogo:
	li $v0, 10
	syscall	

atualiza_pos_fantasmas:
	addi $sp, $sp, -4
	sw   $ra, 0($sp)
	
	lb $a0, azulX
	lb $a1, azulY
	jal bfs
	move $a0, $v0
	sb $v0, azulX
	sb $v1, azulY
	
	lb $a0, rosaX
	lb $a1, rosaY
	jal bfs
	sb $v0, rosaX
	sb $v1, rosaY
	
	lb $a0, laranjaX
	lb $a1, laranjaY
	jal bfs
	sb $v0, laranjaX
	sb $v1, laranjaY
	
	lb $a0, vermelhoX
	lb $a1, vermelhoY
	jal bfs
	sb $v0, vermelhoX
	sb $v1, vermelhoY
	
	lw   $ra, 0($sp)
	add $sp, $sp, 4
	jr $ra



jogar:
	jal desenha_mapa
	addi $sp, $sp, -8
	sw $ra, 0($sp)
	sw $s0, 4($sp)
loop_jogar:
	jal redesenha_pos_antigas
	jal desenha_agentes
	lw $t0, teclado # t0 aponta pro teclado
	lb $s0, 0($t0)  # s0 = conteudo de t0
	move $a0, $s0
	
	
	
	# por enquanto todos os pacmans realizam os mesmos movimentos
	la   $a1, pacman1dir
	jal muda_direcao_pacman
	
	la   $a1, pacman2dir
	jal muda_direcao_pacman
	
	la   $a1, pacman3dir
	jal muda_direcao_pacman
	
	la  $a1, pacman4dir
	jal muda_direcao_pacman
	
	lb $a0, pacman1dir
	
	jal atualiza_pos_pacmans
	jal atualiza_pos_fantasmas
	
	li $a0, 70
	li $v0, 32
	syscall
	j loop_jogar			
	li $v0, 10
	syscall	
fim_loop_jogar:
	lw   $ra, 0($sp)
	lw   $s0, 4($sp)
	addi $sp, $sp, 8
	jr $ra
	
redesenha_pos_antigas:
	addi $sp, $sp, -4
	sw   $ra, 0($sp)
	
	lb  $a0, pacman1_pos_antigaX
	lb  $a1, pacman1_pos_antigaY
	jal redesenha_pos_antiga
	
	lb  $a0, pacman2_pos_antigaX
	lb  $a1, pacman2_pos_antigaY
	jal redesenha_pos_antiga
	
	lb  $a0, pacman3_pos_antigaX
	lb  $a1, pacman3_pos_antigaY
	jal redesenha_pos_antiga
	
	lb  $a0, pacman4_pos_antigaX
	lb  $a1, pacman4_pos_antigaY
	jal redesenha_pos_antiga
	
	lw  $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra
	
# redesenha_pos_antiga serve para redesenhar o
# lugar que um personagem acabou de passar.
# recebe 
# pos_antigaX em $a0
# pos_antigaY em $a1          
redesenha_pos_antiga:
	addi $sp, $sp, -16
	sw   $s0, 0($sp)
	sw   $s1, 4($sp)
	sw   $s2, 8($sp)
	sw   $ra, 12($sp)
	
	move $s0, $a0
	move $s1, $a1
	li $t0, 40
	mult $t0, $a1
	mflo $t0
	add $t0, $t0, $a0 # t0 = posicao na matriz de mapa
	
	la $t1, testebin
	add $t0, $t0, $t1 # t0 = ponteiro pro char daquela posicao
	lb $s2, 0($t0) # t0 = char
	
	lb $t0, charF
	bne $t0, $s2, pula_redesenha_pos_antiga1 # se t0 = ao char
	la $a0, tex1
	move $a1, $s0
	move $a2, $s1
	jal desenha_text
	j fim_redesenha_pos_antiga
pula_redesenha_pos_antiga1:
	lb $t0, charB
	bne $t0, $s2, pula_redesenha_pos_antiga2 # se t0 = ao char
	la $a0, tex2
	move $a1, $s0
	move $a2, $s1
	jal desenha_text
	j fim_redesenha_pos_antiga
pula_redesenha_pos_antiga2:
	lb $t0, charponto
	bne $t0, $s2, fim_redesenha_pos_antiga # se t0 = ao char
	la $a0, tex8
	move $a1, $s0
	move $a2, $s1
	jal desenha_text
fim_redesenha_pos_antiga:
	lw $s0, 0($sp)
	lw $s1, 4($sp)
	lw $s2, 8($sp)
	lw $ra, 12($sp)
	addi $sp, $sp, 16
	jr $ra
# essa rotina atualiza a posicao dos pacmans baseado na direção
# para qual eles estão virados 	
atualiza_pos_pacmans:
	addi $sp, $sp, -4
	sw   $ra, 0($sp)
	
	
	lb $a0, pacman1dir
	la $a1, pacman1X
	la $a2, pacman1Y
	jal atualiza_pos_pacman
	
	
	lb $a0, pacman2dir
	la $a1, pacman2X
	la $a2, pacman2Y
	jal atualiza_pos_pacman

	lb $a0, pacman3dir
	la $a1, pacman3X
	la $a2, pacman3Y
	jal atualiza_pos_pacman

	lb $a0, pacman4dir
	la $a1, pacman4X
	la $a2, pacman4Y
	jal atualiza_pos_pacman	
	
	
	lw   $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra

# atualiza pos pacman atualiza a posicao de um pacman
# recebe:
# pacmandir em $a0
# ponteiro para pacmanX em $a1
# ponteiro para pacmanY em $a2
# da pra melhorar essa funcao
atualiza_pos_pacman:
	addi $sp, $sp, -4
	sw   $s0, 0($sp)
	
	addi $t8, $a1, 5
	
	li $t0, 40
	lb $t1, 0($a2) # t1 = y
	sb $t1, 0($t8) # atualiza pos anterior
	mult $t0, $t1  
	mflo $t0
	lb $t1, 0($a1)
	addi $t8, $a1,4
	sb $t1, 0($t8) # atualiza pos anterior
	add $s0, $t0, $t1 # s0 = posicao aonde ele esta no mapa map[y][x]
	
	li $t1, 1
	bne $a0, $t1, pula_atualiza_pos_pacman1 # se a direcao nao for 1 pula
	addi $t2, $s0, -40 # aponta pro de cima
	la $t3, testebin
	add $t2, $t3, $t2 # t2 = ponteiro para aonde ele está tentando se mover
	lb $t1, 0($t2) # t1 = char que está no lugar, w = wall
	lb $t2, charW
	beq $t1, $t2, fim_atualiza_pos_pacman
	lb $t0 0($a2)
	addi $t0, $t0, -1
	sb $t0, 0($a2)
	j fim_atualiza_pos_pacman
pula_atualiza_pos_pacman1:
	li $t1, 2
	bne $a0, $t1, pula_atualiza_pos_pacman2 # se a direcao nao for 2 pula
	addi $t2, $s0, 40 # aponta pro de cima
	la $t3, testebin
	add $t2, $t3, $t2 # t2 = ponteiro para aonde ele está tentando se mover
	lb $t1, 0($t2) # t1 = char que está no lugar, w = wall
	lb $t2, charW
	beq $t1, $t2, fim_atualiza_pos_pacman
	lb $t0 0($a2)
	addi $t0, $t0, 1
	sb $t0, 0($a2)
	j fim_atualiza_pos_pacman
pula_atualiza_pos_pacman2:
	li $t1, 3
	bne $a0, $t1, pula_atualiza_pos_pacman3 # se a direcao nao for 3 pula
	addi $t2, $s0, -1 # aponta pro de cima
	la $t3, testebin
	add $t2, $t3, $t2 # t2 = ponteiro para aonde ele está tentando se mover
	lb $t1, 0($t2) # t1 = char que está no lugar, w = wall
	lb $t2, charW
	beq $t1, $t2, fim_atualiza_pos_pacman
	lb $t0 0($a1)
	addi $t0, $t0, -1
	sb $t0, 0($a1)
	j fim_atualiza_pos_pacman
pula_atualiza_pos_pacman3:
	li $t1, 4
	bne $a0, $t1, fim_atualiza_pos_pacman # se a direcao nao for 4 pula
	addi $t2, $s0, 1 # aponta pro de cima
	la $t3, testebin
	add $t2, $t3, $t2 # t2 = ponteiro para aonde ele está tentando se mover
	lb $t1, 0($t2) # t1 = char que está no lugar, w = wall
	lb $t2, charW
	beq $t1, $t2, fim_atualiza_pos_pacman
	lb $t0 0($a1)
	addi $t0, $t0, 1
	sb $t0, 0($a1)
	j fim_atualiza_pos_pacman
pula_atualiza_pos_pacman4:
fim_atualiza_pos_pacman:
	lw $s0, 0($sp)
	addi $sp, $sp, 4
	jr $ra




# muda direcao recebe
# char apertado em $a0
# ponteiro para a direcao do pacman em $a1
muda_direcao_pacman:
	lb $t0, charW
	bne $a0, $t0, pula_muda_direcao_pacman1
	li $t0, 1
	sb $t0, 0($a1)
pula_muda_direcao_pacman1:
	lb $t0, charS
	bne $a0, $t0, pula_muda_direcao_pacman2
	li $t0, 2
	sb $t0, 0($a1)
pula_muda_direcao_pacman2:
	lb $t0, charA
	bne $a0, $t0, pula_muda_direcao_pacman3
	li $t0, 3
	sb $t0, 0($a1)
pula_muda_direcao_pacman3:
	lb $t0, charD
	bne $a0, $t0, pula_muda_direcao_pacman4
	li $t0, 4
	sb $t0, 0($a1)
pula_muda_direcao_pacman4:	
	jr $ra
# essa rotina desenha o mapa inicialmente,
# a partir das informações carregadas em memória
desenha_mapa:
	addi $sp, $sp, -4
	sw   $ra, 0($sp)
	
	jal desenha_mapa1	
		
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra

desenha_mapa1:
	addi $sp, $sp, -24
	sw   $ra, 0($sp)
	sw   $s0, 4($sp)
	sw   $s1, 8($sp)
	sw   $s2, 12($sp)
	sw   $s3, 16($sp)
	sw   $s4, 20($sp)
	la   $s4, testebin
	li   $s0, 0
	li   $s1, 30
loop_desenha_mapa1:	
	beq $s0, $s1, fim_loop_desenha_mapa1
	jal desenha_mapa2
	
	addi $s0, $s0, 1
	j loop_desenha_mapa1
fim_loop_desenha_mapa1:
	lw $s4, 20($sp)
	lw $s3, 16($sp)
	lw $s2, 12($sp)
	lw $s1, 8($sp)
	lw $s0, 4($sp)
	lw $ra, 0($sp)	
	addi $sp, $sp, 24
	jr $ra

desenha_mapa2:
	addi $sp, $sp, -4
	sw   $ra, 0($sp)
	li   $s2, 0
	li   $s3, 40
loop_desenha_mapa2:	
	beq $s2, $s3, fim_loop_desenha_mapa2
	lb $t0, 0($s4) # t0 = caractere da textura
	# e possivel otimizar trocando os beqs por bnes e inserindo vários labels
	# mas estou com preguiça e acho que nao faz tanta diferença
	lb $t1, charW
	la $t2, tex0
	beq $t0, $t1, apos_escolher
	
	lb $t1, charF
	la $t2, tex1
	beq $t0, $t1, apos_escolher
			
	lb $t1, charB
	la $t2, tex2
	beq $t0, $t1, apos_escolher
		
	lb $t1, charponto
	la $t2, tex8
	beq $t0, $t1,  apos_escolher
	
	j erro_reconhecimento_textura
apos_escolher:
	move $a0, $t2
	move $a1, $s2
	move $a2, $s0		
	jal desenha_text
	
	addi $s2, $s2, 1
	addi $s4, $s4, 1 # atualiza buftex
	j loop_desenha_mapa2
fim_loop_desenha_mapa2:
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra	

# desenha text recebe 
# ponteiro para a textura em $a0
# posicao x em $a1
# posicao y em $a2

desenha_text:
	addi $sp, $sp, -28
	sw   $ra, 0($sp)
	sw   $s0, 4($sp)
	sw   $s1, 8($sp)
	sw   $s2, 12($sp)
	sw   $s3, 16($sp)
	sw   $s4, 20($sp)
	sw   $s5, 24($sp)
	lw $t0, bitmap
	li $t1, 2560
	mult $t1, $a2
	mflo $t1 # t1 = y * 2560
	sll $t2, $a1, 3 # t2 = x * x
	add $t1, $t2, $t1 # t1 = offset
	add $s4, $t1, $t0 # s4 = ponteiro para aonde desenhar
	move $s5, $a0 # s5 = ponteiro para a imagem
	li   $s0, 0
	li   $s1, 8
loop_desenha_text1:
	beq $s0, $s1, fim_loop_desenha_text1 # se s0 == s1, break
	jal desenha_text2	
	addi $s0, $s0, 1
	j loop_desenha_text1
fim_loop_desenha_text1:
	lw $ra, 0($sp)
	lw $s0, 4($sp)
	lw $s1, 8($sp)
	lw $s2, 12($sp)
	lw $s3, 16($sp)
	lw $s4, 20($sp)
	lw $s5, 24($sp)
	addi $sp, $sp, 28
	jr $ra

desenha_text2:
	li   $s2, 0
	li   $s3, 8
loop_desenha_text2:
	beq $s2, $s3, fim_loop_desenha_text2 # se s0 == s1, break
	lw   $t0, 0($s5)
	sw   $t0, 0($s4)
	addi $s5, $s5, 4 # atualiza ponteiro para o buffer
	addi $s2, $s2, 4 # atualiza contador
	addi $s4, $s4, 4 # atualiza bitmap
	j loop_desenha_text2
fim_loop_desenha_text2:
	addi $s4, $s4, 312 # 320 - 8
	jr $ra
	

# rotinas para debug em geral																									
# funcao que imprime caso passe por lá, só serve para debug mesmo.
debug:
	addi $sp, $sp, -4
	sw   $a0, 0($sp)
	la $a0, estou_aq
	li $v0, 4
	syscall
	lw  $a0, 0($sp)
	addi $sp, $sp, 4
	jr $ra
	
erro_reconhecimento_textura:
	la $a0, erro_text
	li $v0, 4
	syscall
	move $a0, $t8
	li $v0, 11
	syscall
	li $v0, 10
	syscall

return: jr $ra
