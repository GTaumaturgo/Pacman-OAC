.eqv 

.data	
	char0: .byte 48
	char1: .byte 49
	char2: .byte 50
	char3: .byte 51
	char4: .byte 52
	charA: .byte 65
	charB: .byte 66
	charE: .byte 69
	charF: .byte 70
	charL: .byte 76
	charP: .byte 80
	charQ: .byte 81
	charR: .byte 82
	charV: .byte 86
	charW: .byte 87
	pacmanX:  .space 1
	pacmanY:  .space 1
	n_jog: .space 1
	n_fant:.space 1
	azulX: .space 1
	azulY: .space 1
	rosaX: .space 1
	rosaY: .space 1
	laranjaX: .space 1
	laranjaY: .space 1
	vermelhoX: .space 1
	vermelhoY: .space 1
	bitmap: .word 0xff000000
	teclado:.word 0xff100004
	estou_aq: .asciiz "Estou aqui\n" # mensagem para debug
	erro_text:.asciiz "ERRO: algum caractere nao pode ser reconhecido ao aplicar as texturas"
	
	simplesbin: .byte 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 
	                  0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x50, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 
	                  0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 
	                  0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 
	                  0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 
	                  0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	                  0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 
	                  0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	                  0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 
	                  0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	                  0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x41, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 
	                  0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x42, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	                  0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 
	                  0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	                  0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 
	                  0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	                  0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 
	                  0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 
	                  0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x52, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 0x46, 0x57, 0x57, 
	                  0x46, 0x4C, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x56, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 
	                  0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57
	# arquivos com as texturas.
	tex0:  .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF			
	tex7:  .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	tex8:  .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	tex10: .byte 0x00, 0x00, 0x00, 0x09, 0x09, 0x00, 0x00, 0x00, 0x00, 0x09, 0x36, 0x3F, 0x3F, 0x36, 0x09, 0x00, 0x00, 0x36, 0x3F, 0x3F, 0x3F, 0x3F, 0x36, 0x00, 0x09, 0x2D, 0x09, 0x36, 0x3F, 0x3F, 0x3F, 0x09, 0x09, 0x2D, 0x09, 0x2D, 0x36, 0x3F, 0x3F, 0x09, 0x09, 0x3F, 0x36, 0x00, 0x00, 0x36, 0x3F, 0x09, 0x00, 0x2D, 0x1B, 0x00, 0x00, 0x1B, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	tex11: .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x1B, 0x00, 0x00, 0x1B, 0x2D, 0x00, 0x09, 0x3F, 0x36, 0x00, 0x00, 0x36, 0x3F, 0x09, 0x09, 0x2D, 0x09, 0x2D, 0x36, 0x3F, 0x3F, 0x09, 0x09, 0x2D, 0x09, 0x36, 0x3F, 0x3F, 0x3F, 0x09, 0x00, 0x36, 0x3F, 0x3F, 0x3F, 0x3F, 0x36, 0x00, 0x00, 0x09, 0x36, 0x3F, 0x3F, 0x36, 0x09, 0x00, 0x00, 0x00, 0x00, 0x09, 0x09, 0x00, 0x00, 0x00
	tex12: .byte 0x00, 0x00, 0x00, 0x09, 0x09, 0x09, 0x00, 0x00, 0x00, 0x09, 0x36, 0x2D, 0x2D, 0x3F, 0x2D, 0x00, 0x00, 0x36, 0x3F, 0x09, 0x09, 0x36, 0x1B, 0x00, 0x09, 0x3F, 0x3F, 0x36, 0x2D, 0x00, 0x00, 0x00, 0x09, 0x3F, 0x3F, 0x3F, 0x36, 0x00, 0x00, 0x00, 0x00, 0x36, 0x3F, 0x3F, 0x3F, 0x36, 0x1B, 0x00, 0x00, 0x09, 0x36, 0x3F, 0x3F, 0x3F, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x09, 0x09, 0x09, 0x00, 0x00
	tex13: .byte 0x00, 0x00, 0x09, 0x09, 0x09, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x3F, 0x2D, 0x2D, 0x36, 0x09, 0x00, 0x00, 0x1B, 0x36, 0x09, 0x09, 0x3F, 0x36, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x36, 0x3F, 0x3F, 0x09, 0x00, 0x00, 0x00, 0x36, 0x3F, 0x3F, 0x3F, 0x09, 0x00, 0x1B, 0x36, 0x3F, 0x3F, 0x3F, 0x36, 0x00, 0x00, 0x2D, 0x3F, 0x3F, 0x3F, 0x36, 0x09, 0x00, 0x00, 0x00, 0x09, 0x09, 0x09, 0x00, 0x00, 0x00
	tex14: .byte 0x00, 0x00, 0xA8, 0xF8, 0xF8, 0xA8, 0x00, 0x00, 0x00, 0xA8, 0xF8, 0xF8, 0xF8, 0xF8, 0xA8, 0x00, 0x08, 0xF9, 0xFC, 0xF8, 0xF8, 0xFC, 0xF9, 0x08, 0x08, 0xA8, 0xAD, 0xF9, 0xF4, 0xA7, 0xD9, 0x01, 0x08, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x08, 0x08, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x08, 0x08, 0xF0, 0xF0, 0xF8, 0xF8, 0xF0, 0xF0, 0x08, 0x00, 0x00, 0x36, 0x36, 0x00, 0x00, 0x01, 0x06
	tex15: .byte 0x00, 0x00, 0x85, 0xC7, 0xC7, 0x85, 0x00, 0x00, 0x00, 0x85, 0xC7, 0xC7, 0xC7, 0xC7, 0x85, 0x00, 0x01, 0xCF, 0xE7, 0xC7, 0xC7, 0xE7, 0xCF, 0x01, 0x01, 0x85, 0xAD, 0xCF, 0xF4, 0xA7, 0x79, 0x09, 0x01, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0x01, 0x01, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0x01, 0x01, 0xC6, 0xC6, 0xC7, 0xC7, 0xC6, 0xC6, 0x01, 0x00, 0x00, 0x30, 0xF0, 0xC0, 0x00, 0x01, 0x0E
	tex16: .byte 0xC7, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0xC7, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xC7, 0xC7, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xC7, 0x20, 0x20, 0x27, 0x20, 0x20, 0x20, 0x20, 0xC7, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xC7, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xC7, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xC7, 0xC7, 0x20, 0x20, 0x20, 0x20, 0xC7, 0xC7
	tex17: .byte 0x00, 0x00, 0x05, 0x07, 0x07, 0x05, 0x00, 0x00, 0x00, 0x05, 0x07, 0x07, 0x07, 0x07, 0x05, 0x00, 0x01, 0x0F, 0xA7, 0x07, 0x07, 0xA7, 0x0F, 0x01, 0x01, 0x05, 0xAD, 0x0F, 0xE4, 0x9B, 0xC0, 0x00, 0x01, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x01, 0x01, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x01, 0x01, 0x06, 0x06, 0x07, 0x07, 0x06, 0x06, 0x01, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00
	
	IRDA_DECODER: .word 0xFFFF049C
	PACMAN_DIR:   .space 4   #1 byte para cada PacMan

	END_OPC_MENU: .space 20 #x = MENU_IND_MAX + 1 (de 0 até MENU_IND_MAX)
.text
	#jal menu
	#jal desenha_mapa
	#li $v0, 10
	#syscall

menu_ini:	la $t1, END_OPC_MENU
		la $t0, jogo_ini
		sw $t0, 0($t1)
		la $t0, menu_escolhe_jogadores
		sw $t0, 4($t1)
		la $t0, menu_escolhe_fantasmas
		sw $t0, 8($t1)
		#la $t0, menu_escolhe_mapa
		#sw $t0, 12($t1)
		la $t0, sair_do_jogo
		sw $t0, 16($t1)
		
		li $a0, 0x15      #bf amarelo quse branco; 7f amarelo fraco; 1f laranja; 0f vermelho; 37 amarelo forte; 3b verde fraco; 3d verde amarelo; 3e amarelo esverdeado
		jal preenche_tela
		
		la $s7, IRDA_DECODER
		lw $s7, 0($s7) #endereco do decoder
		
		move $s0, $zero #indice atual no menu
		li $s1, 3 #Tamanho do menu = $s1 + 1, de 0 até $s1
menu:
		lw $v0, 0($s7) #Recebe o IrDA
		
		andi $t1, $v0, 0x80000000
		bne $t1, $zero, next #Pule se for um comando invalido
		
		la $t0, end_bas_menu #Enderco basico do jump (menu)
		srl $t1, $v0, 16 #Deslocamento
		add $t0, $t0, $t1 #End bas + desl
		
		la $a0, menu #Para utilizar vol_mais, vol_menos, ch_mais, ch_menos
		
		jr $t0
		nop #Devido ao Pipeline
end_bas_menu:	
		j enter_menu
		j cima_menu
		j baixo_menu
		j esquerda_menu
		j direita_menu
		j casa_menu
		j desligar
		j vol_mais
		j vol_menos
		j ch_mais
		j ch_menos
		j menu
		j menu
		j menu
		j menu
		j menu
enter_menu:
		la $t0, END_OPC_MENU
		sll $t1, $s0, 2 #4 * indice
		add $t0, $t0, $t1 #inicio do vetor + indice
		
		lw $t1, 0($t0)
		la $ra, menu_ini #Para o retorno
		jr $t1
cima_menu:
		beq $s0, $zero, menu #Se for zero nao diminui
		addi $s0, $s0, -1
		j menu
baixo_menu:
		beq $s0, $s1, menu #Se for a maximo nao aumenta
		addi $s0, $s0, 1
		j menu
esquerda_menu:
		j menu
direita_menu:
		j menu
casa_menu:
		j menu

jogo_ini: #TODO: salvar e recuperar $ra
		addi $sp, $sp, -4
		sw $ra, 0($sp)
		
		jal desenha_mapa
		
		la $s7, IRDA_DECODER
		lw $s7, 0($s7) #endereco do decoder
jogo:
		lw $v0, 0($s7) #Recebe o IrDA
		
		andi $t1, $v0, 0x80000000
		bne $t1, $zero, next #Pule se for um comando invalido
		
		la $t0, end_bas_jogo #Enderco basico do jump (jogo)
		srl $t1, $v0, 16 #Deslocamento
		add $t0, $t0, $t1 #End bas + desl
		
		la $a0, next #Para utilizar vol_mais, vol_menos, ch_mais, ch_menos
		
		jr $t0
		nop #Devido ao Pipeline
		
end_bas_jogo:	
		j enter_jogo
		j cima_jogo
		j baixo_jogo
		j esquerda_jogo
		j direita_jogo
		j casa_jogo
		j desligar
		j vol_mais
		j vol_menos
		j ch_mais
		j ch_menos
		j next
		j next
		j next
		j next
		j next
next:	#se nao foi apertado nenhum botao
	j jogo

enter_jogo: #Nenhuma funcionalidade
		j next

cima_jogo:
		li $a0, 1
		j escreve_dir
baixo_jogo:
		li $a0, 2
		j escreve_dir
esquerda_jogo:
		li $a0, 2
		j escreve_dir
direita_jogo:
		li $a0, 2
		j escreve_dir
escreve_dir:
		la $t0, PACMAN_DIR #vetor na memoria das direcoes para as quais os PacMan vao
		andi $t1, $v0, 0x0000FFFF
		add $t0, $t0, $t1
		sw $a0, 0($t0)
		j next
casa_jogo:
		lw $ra, 0($sp)
		addi $sp, $sp, 4
		jr $ra #Retorna para o menu

desligar:	#TODO: apagar dados e colocar tela preta, mais loop
		la $a0, menu
		jr $a0
vol_mais: #Nenhuma funcionalidade
		jr $a0

vol_menos: #Nenhuma funcionalidade
		jr $a0

ch_mais: #Nenhuma funcionalidade
		jr $a0

ch_menos: #Nenhuma funcionalidade
		jr $a0



# preenche tela recebe
# cor (32 bits) em $a0
preenche_tela:
	lw $a2, bitmap
	or $a1, $a2, $zero
	addi $a1, $a1, 76800
loop_preenche_tela:
	beq $a2, $a1, return
	sb $a0, 0($a2)
	addi $a2, $a2, 1
	j loop_preenche_tela
	
#menu:
#	addi $sp, $sp, -4
#	sw $ra, 0($sp)
#	li $a0, 0x15      #bf amarelo quse branco; 7f amarelo fraco; 1f laranja; 0f vermelho; 37 amarelo forte; 3b verde fraco; 3d verde amarelo; 3e amarelo esverdeado
#	jal preenche_tela 
#loop_menu:	
#	li $v0, 12
#	syscall
#	
#	lb $t0, char1
#	beq $v0, $t0, menu_escolhe_jogadores
#	
#	lb $t0, char2
#	beq $v0, $t0, menu_escolhe_fantasmas
#	
#	#lb $t0, char3
#	#beq $v0, $t0, menu_escolhe mapa
#	lb $t0, char4
#	beq $v0, $t0, sair_do_jogo
#	
#	j loop_menu

menu_escolhe_jogadores:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	li $a0, 0x00000000
	jal preenche_tela
loop_menu_escolhe_jogadores:
	li $v0, 12
	syscall  # le char
	lb $t0, char0 # to = '0'
	sub $t0, $v0, $t0 # t0 = v0 - '0', ou seja, o proprio numero de jogadores
	li $t1, 5 # t1 = 5
	slt $t1, $t0, $t1 # t0 < 5 ? 
	beq $t1, $zero, loop_menu_escolhe_jogadores # se nao for, le de novo porque o máximo é 4
	
	li $t1, 0 # t1 = 1
	sgt $t1, $t0, $t1 # t0 > 0 ?
	beq $t1, $zero, loop_menu_escolhe_jogadores # se nao for, le de novo porque o mínimo é 1
	# Caso não haja problema, armazene o número em n_jog
	sb $t0, n_jog
fim_loop_menu_escolhe_jogadores:
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra


menu_escolhe_fantasmas:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	li $a0, 0x00000000
	jal preenche_tela
loop_menu_escolhe_fantasmas:
	li $v0, 12
	syscall  # le char
	lb $t0, char0 # to = '0'
	sub $t0, $v0, $t0 # t0 = v0 - '0', ou seja, o proprio numero de jogadores
	li $t1, 5 # t1 = 5
	slt $t1, $t0, $t1 # t0 < 5 ? 
	beq $t1, $zero, loop_menu_escolhe_fantasmas # se nao for, le de novo porque o máximo é 4
	
	li $t1, 0 # t1 = 1
	sgt $t1, $t0, $t1 # t0 > 0 ?
	beq $t1, $zero, loop_menu_escolhe_fantasmas # se nao for, le de novo porque o mínimo é 1
	# Caso não haja problema, armazene o número em n_jog
	sb $t0, n_fant
fim_loop_menu_escolhe_fantasmas:
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra
	
		
			
	
sair_do_jogo:
	li $v0, 10
	syscall	
		
		

	
	
	
	
	
	

# essa rotina desenha o mapa inicialmente,
# a partir das informações carregadas em memória
desenha_mapa:
	addi $sp, $sp, -4
	
	sw   $ra, 0($sp)
	
	li   $t1, 30
	li   $t3, 40
	li   $t5, 8
	li   $t7  8
	lw   $a0, bitmap
	la   $a1, simplesbin
	
	jal desenha1
	
	
		
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra	

desenha1:
	addi $sp, $sp, -4
	sw   $ra, 0($sp)
	li   $t0, 0
loop_desenha1:	
	beq $t0, $t1, fim_loop_desenha1
	jal desenha2
	
	addi $t0, $t0, 1
	j loop_desenha1
fim_loop_desenha1:
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra

desenha2:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	li   $t2, 0
loop_desenha2:	
	beq $t2, $t3, fim_loop_desenha2
	lb $t8, 0($a1) # t8 = caractere da textura
	# e possiv/el otimizar trocando os beqs por bnes e inserindo vários labels
	lb $t9, charW
	la $a2, tex0
	beq $t8, $t9, apos_escolher
	
	lb $t9, charP
	la $a2, tex13
	beq $t8, $t9, seta_pos_pacman
	
	lb $t9, charA
	la $a2, tex14
	beq $t8, $t9, seta_pos_azul
	
	lb $t9, charR
	la $a2, tex15
	beq $t8, $t9, seta_pos_rosa
	
	lb $t9, charL
	la $a2, tex16
	beq $t8, $t9, seta_pos_laranja
	
	lb $t9, charV
	la $a2, tex17
	beq $t8, $t9, seta_pos_vermelho

	lb $t9, charF
	la $a2, tex7
	beq $t8, $t9, apos_escolher
	
	lb $t9, charB
	la $a2, tex8
	beq $t8, $t9, apos_escolher

	j erro_reconhecimento_textura
	
apos_escolher:	
	jal desenha3

	addi $t2, $t2, 1
	addi $a1, $a1, 1 # atualiza buftex
	j loop_desenha2
fim_loop_desenha2:
	addi $a0, $a0, 2240 # 320 * 7
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra

seta_pos_pacman:
	sb $t0, pacmanY	
	sb $t2, pacmanX
	j apos_escolher
seta_pos_azul:
	sb $t0, azulY
	sb $t2, azulX
	jal debug
	j apos_escolher
seta_pos_rosa:
	sb $t0, rosaY
	sb $t2, rosaX
	j apos_escolher
seta_pos_laranja:
	sb $t0, laranjaY
	sb $t2, laranjaX
	j apos_escolher
seta_pos_vermelho:
	sb $t0, vermelhoY
	sb $t2, vermelhoX
	j apos_escolher
	

desenha3:
	addi $sp, $sp, -4
	sw   $ra, 0($sp)
	li   $t4, 0
loop_desenha3:

	beq $t4, $t5, fim_loop_desenha3 # se t4 == t5, break
	jal desenha4	
	addi $t4, $t4, 1
	j loop_desenha3
fim_loop_desenha3:
	addi $a0, $a0, -2552 # -(320 * 8 - 8)
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra

desenha4:
	addi $sp, $sp, -4
	sw   $ra, 0($sp)
	li   $t6, 0
loop_desenha4:
	beq $t6, $t7, fim_loop_desenha4 # se t6 == t7, break
	lb   $a3, 0($a2)
	sb   $a3, 0($a0)
	addi $a2, $a2, 1 # atualiza ponteiro para o buffer
	addi $t6, $t6, 1 # atualiza contador
	addi $a0, $a0, 1 # atualiza bitmap
	j loop_desenha4
fim_loop_desenha4:
	addi $a0, $a0, 312 # 320 - 8
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra	


	
# funcao que imprime caso passe por lá, só serve para debug mesmo.
debug:
	addi $sp, $sp, -4
	sw   $a0, 0($sp)
	la $a0, estou_aq
	li $v0, 4
	syscall
	lw  $a0, 0($sp)
	addi $sp, $sp, 4
	jr $ra
	
erro_reconhecimento_textura:
	la $a0, erro_text
	li $v0, 4
	syscall
	move $a0, $t8
	li $v0, 11
	syscall
	li $v0, 10
	syscall
		    
# esse procedimento recebe:
# nome do arquivo em $a0
# buffer  para escrever o que ler em $a1
# tamanho do arquivo em $a2

return: jr $ra
